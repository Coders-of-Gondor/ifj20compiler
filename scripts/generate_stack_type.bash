#!/usr/bin/env bash

# generate_stack_type.bash
# Marek Filip <xfilip46>
# Implementace překladače imperativního jazyka IFJ20.
# 26/11/2020

# Usage:
# Script requires two arguments to work properly
# 1st arg: data type name to use for the stack implementation.
# 2nd arg: folder, into which to place the created files.

if [ -z "$1" ] || [ -z "$2" ] || [ -n "$3" ] ; then
	echo "Usage: generate_stack_type <TYPE> <DIR>"
	echo "TYPE: Data type name to use for the stack implementation."
	echo "DIR: Folder, into which to place the created files."
	exit 1
fi

readonly date=$(date '+%d/%m/%Y')
readonly TYPE=$1
PTRTYPE=$1
readonly DIR=$2

# is pointer is present
if echo "$TYPE" | grep '*' >/dev/null; then
	# replace every "*" with "ptr"
	PTRTYPE=$(echo "$TYPE" | sed "s/*/ptr/g")
	TYPEDEF="typedef $TYPE $PTRTYPE"
fi

# create stack_type.c
printf "/**
 * @file stack_$PTRTYPE.c
 * @author Marek Filip <xfilip46>
 * @brief $TYPE stack source file.
 * @details Implementace překladače imperativního jazyka IFJ20.
 * Generated by generate_stack_type.bash (Author: Marek Filip <xfilip46>)
 * @date $date
 */

#include \"stack_$PTRTYPE.h\"

// due to how C includes work we can safely include extern definitions
// from a header file
#include \"stack_extern_template.h\"
#undef TYPE  // undef the TYPE used in stack_$PTRTYPE.h
" > "$DIR/stack_$PTRTYPE.c"

# create stack_type.h
printf "/**
 * @file stack_$PTRTYPE.h
 * @author Marek Filip <xfilip46>
 * @brief $TYPE stack header file.
 * @details Implementace překladače imperativního jazyka IFJ20.
 * Generated by generate_stack_type.bash (Author: Marek Filip <xfilip46>)
 * @date $date
 */

// header guards included in stack.h, no need for them here

$TYPEDEF;
#define TYPEDEF $TYPEDEF
#define TYPE $PTRTYPE  // undef is located in the stack_$PTRTYPE.c file
#include \"stack.h\"
" > "$DIR/stack_$PTRTYPE.h"

echo "Don't forget to add the source files into the Makefile!!!"
